[
  {
    "question": "클린 아키텍처의 핵심 원칙은 무엇인가요?",
    "contexts": [
      "클린 아키텍처는 로버트 C. 마틴이 제안한 소프트웨어 설계 철학입니다.",
      "가장 중요한 규칙은 '의존성 규칙'으로, 모든 소스 코드 의존성은 외부에서 내부로, 즉 저수준의 구체적인 정책에서 고수준의 추상적인 정책으로만 향해야 합니다.",
      "이를 통해 시스템은 프레임워크, 데이터베이스, UI와 독립적으로 유지될 수 있습니다."
    ],
    "answer": "클린 아키텍처의 핵심 원칙은 의존성 규칙입니다. 이는 모든 소스코드 의존성이 외부에서 내부로 향해야 한다는 것을 의미합니다.",
    "ground_truth": "클린 아키텍처의 핵심 원칙은 의존성 규칙으로, 모든 소스 코드 의존성은 외부에서 내부로, 저수준 정책에서 고수준 정책으로 향해야 합니다."
  },
  {
    "question": "RAGAS의 Faithfulness 지표는 무엇을 측정하나요?",
    "contexts": [
      "Faithfulness는 생성된 답변이 제공된 컨텍스트에 얼마나 충실한지를 평가합니다.",
      "이 지표는 LLM의 환각(Hallucination) 현상을 측정하는 데 사용됩니다.",
      "Answer Relevancy는 답변이 질문과 관련이 있는지를 측정하는 다른 지표입니다."
    ],
    "answer": "Faithfulness는 생성된 답변이 제공된 컨텍스트에 얼마나 충실한지, 즉 컨텍스트에 없는 내용을 지어내지 않았는지를 평가하는 지표입니다.",
    "ground_truth": "Faithfulness는 생성된 답변이 제공된 컨텍스트에 얼마나 충실한지를 평가하여 LLM의 환각 현상을 측정하는 지표이다."
  },
  {
    "question": "파이썬에서 딕셔너리를 정렬하는 방법은 무엇인가요?",
    "contexts": [
      "파이썬에서 딕셔너리를 정렬하려면 sorted() 함수를 사용할 수 있습니다.",
      "키를 기준으로 정렬하려면 dict.items()와 함께 sorted()를 사용합니다.",
      "값을 기준으로 정렬하려면 key 매개변수를 사용하여 lambda x: x[1]을 지정합니다."
    ],
    "answer": "파이썬에서 딕셔너리를 정렬하려면 sorted() 함수를 사용하면 됩니다. 또한 파이썬 3.7부터는 딕셔너리가 기본적으로 삽입 순서를 유지합니다. 추가로 collections.OrderedDict을 사용하여 순서를 보장할 수도 있으며, NumPy 배열에서는 argsort() 함수를 활용할 수 있습니다.",
    "ground_truth": "파이썬에서 딕셔너리를 정렬하려면 sorted() 함수와 dict.items()를 함께 사용하며, 키나 값을 기준으로 정렬할 수 있습니다."
  },
  {
    "question": "머신러닝에서 오버피팅을 방지하는 방법은?",
    "contexts": [
      "정규화(Regularization)는 오버피팅을 방지하는 대표적인 기법입니다.",
      "드롭아웃(Dropout)은 신경망에서 사용하는 정규화 기법입니다."
    ],
    "answer": "머신러닝에서 오버피팅을 방지하는 방법에는 정규화, 드롭아웃, 조기 종료 등이 있습니다.",
    "ground_truth": "머신러닝에서 오버피팅을 방지하는 방법으로는 정규화(L1, L2), 드롭아웃, 조기 종료, 교차 검증, 데이터 증강 등이 있습니다."
  },
  {
    "question": "API 설계에서 RESTful 원칙이란 무엇인가요?",
    "contexts": [
      "RESTful API는 HTTP 메서드를 의미에 맞게 사용하는 것이 중요합니다.",
      "자원(Resource)은 URI로 표현되며, 명사 형태로 작성해야 합니다.",
      "상태 코드를 적절히 사용하여 요청 처리 결과를 명확히 전달해야 합니다."
    ],
    "answer": "RESTful 원칙은 웹 애플리케이션 개발에서 사용되는 아키텍처 스타일입니다. SOAP와 달리 가볍고 빠른 특징을 가지고 있으며, JSON과 XML 형식을 모두 지원합니다. 또한 마이크로서비스 아키텍처와 잘 어울리는 특징이 있어 많은 회사에서 채택하고 있습니다.",
    "ground_truth": "RESTful 원칙은 HTTP 메서드의 의미적 사용, 자원의 URI 표현, 적절한 상태 코드 사용을 통해 일관되고 예측 가능한 API를 설계하는 것입니다."
  },
  {
    "question": "데이터베이스에서 인덱스의 역할은 무엇인가요?",
    "contexts": [
      "데이터베이스 인덱스는 테이블의 검색 성능을 향상시키는 자료구조입니다.",
      "인덱스는 B-tree, Hash, Bitmap 등 다양한 구조로 구현될 수 있습니다.",
      "쿼리 최적화 도구들은 인덱스 정보를 활용하여 효율적인 실행 계획을 생성합니다.",
      "인덱스를 너무 많이 만들면 데이터 삽입과 수정 시 성능이 저하될 수 있습니다.",
      "클러스터드 인덱스와 논클러스터드 인덱스는 서로 다른 특성을 가집니다."
    ],
    "answer": "데이터베이스 인덱스는 테이블의 검색 성능을 향상시키는 자료구조입니다.",
    "ground_truth": "데이터베이스 인덱스는 테이블의 검색 성능을 향상시키는 자료구조로, B-tree, Hash, Bitmap 등의 구조로 구현되며 쿼리 최적화에 활용됩니다."
  },
  {
    "question": "클라우드 컴퓨팅의 장점은 무엇인가요?",
    "contexts": [
      "클라우드 컴퓨팅은 인터넷을 통해 컴퓨팅 리소스를 제공하는 서비스입니다.",
      "사용자는 필요한 만큼의 리소스를 사용하고 비용을 지불하는 종량제 방식을 사용합니다.",
      "물리적 서버 관리가 불필요하여 운영 비용을 절감할 수 있습니다."
    ],
    "answer": "클라우드 컴퓨팅의 가장 큰 장점은 비용 절감입니다. 초기 투자 비용이 적고, 필요에 따라 리소스를 조정할 수 있어 효율적입니다.",
    "ground_truth": "클라우드 컴퓨팅의 장점은 종량제 비용 구조, 운영 비용 절감, 확장성, 유연성 등이 있습니다."
  },
  {
    "question": "블록체인 기술의 특징은?",
    "contexts": [
      "블록체인은 분산 원장 기술로 거래 내역을 여러 노드에 복제하여 저장합니다."
    ],
    "answer": "블록체인은 혁신적인 기술로 미래의 모든 산업을 바꿀 것입니다. 특히 암호화폐뿐만 아니라 스마트 컨트랙트, IoT, 메타버스와도 연계되어 Web3 생태계의 핵심 기술로 자리잡고 있습니다. 양자컴퓨팅과 결합하면 더욱 강력해질 것으로 예상됩니다.",
    "ground_truth": "블록체인은 분산 원장 기술로 투명성, 불변성, 탈중앙화 특성을 가지며 암호화 해시를 통해 데이터 무결성을 보장합니다."
  }
] 